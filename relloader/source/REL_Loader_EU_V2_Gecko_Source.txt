# Code created by PistonMiner and Zephiles

# 800710F4 - Address to hook for this code

# Set global function/variable/offset locations/values
.set CARDMGR_WORK_PTR_OFFSET,0x1C78
.set INTERNAL_FILENAME_LOCATION,0x800040DC
.set HeapArray,0x8042B9E0
.set __memFree,0x800301AC
.set __memAlloc,0x800301D8
.set DLInsert,0x8029A238
.set Link,0x8029E650
.set OSUnlink,0x8029EB8C
.set CARDGetResultCode,0x802B07C0
.set CARDCheckAsync,0x802B34E4
.set CARDProbeEx,0x802B3610
.set CARDMountAsync,0x802B3D18
.set CARDUnmount,0x802B3F54
.set CARDOpen,0x802B4C58
.set CARDClose,0x802B4D74
.set CARDReadAsync,0x802B5408

# Initialize static values used for addresses
lis r31,0x8000
lis r30,0x8003
lis r29,0x8029
lis r28,0x802B

li r27,0 # Used to check if a REL file is loaded or not

# Check if a Memory Card is present
# To avoid an infinite loop, only check for a memory card a set amount of times
lis r26,0x000F
ori r26,r26,0x4240 # Check 1,000,000 times
ori r25,r28,CARDProbeEx@l

checkForMemoryCardLoop:
mtlr r25 # CARDProbeEx
li r3,0 # Memory Card Slot A
li r4,0 # Pointer to the Memory Size (Not needed, so NULL)
li r5,0 # Pointer to the Sector Size (Not needed, so NULL)
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
bne- exitCheckForMemoryCardLoop

# Exit if the limit has been reached
subic. r26,r26,1
bgt+ checkForMemoryCardLoop

exitCheckForMemoryCardLoop:
cmpwi r3,0 # Check if something went wrong
bne- exit

# Mount the Memory Card
ori r3,r28,CARDMountAsync@l
mtlr r3
li r3,0 # Memory Card Slot A
lwz r4,CARDMGR_WORK_PTR_OFFSET(r13)
lwz r4,0x4(r4) # Pointer to the Work Area
li r5,0 # Detach Callback function (Want to avoid using, so NULL)
li r6,0 # Attach Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Ready
beq+ checkForErrors
cmpwi r3,-6 # Broken
beq- checkForErrors
b exit

checkForErrors:
# Check for and attempt to repair memory card errors
ori r3,r28,CARDCheckAsync@l
mtlr r3
li r3,0 # Memory Card Slot A
li r4,0 # Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Check if something went wrong
bne- exit

# Allocate memory for CardFileInfo
li r4,0x14
bl allocateMemory

# Backup the returned address to be used for later
mr r26,r3

# Open the file
ori r3,r28,CARDOpen@l
mtlr r3
li r3,0 # Memory Card Slot A
ori r4,r31,INTERNAL_FILENAME_LOCATION@l
mr r5,r26 # Pointer to CardFileInfo
blrl
cmpwi r3,0 # Check if something went wrong
bne- freeCardFileInfo

# Allocate 0x400 bytes of memory, as the read size must be in multiples of 0x200 bytes, 
# and the BSS Area size, the fixed REL size, and the BSS Align are needed later

li r4,0x400 # Bytes to allocate
bl allocateMemory

# Backup the returned address to be used for later
mr r24,r3

# Read from the Card
ori r3,r28,CARDReadAsync@l
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
li r5,0x400 # Amount of bytes to read
li r6,0x2000 # Offset in the file to start reading from
li r7,0 # Read Callback function (Want to avoid using, so NULL)
blrl
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the File Size, as it will be used later
lwz r6,0x40(r24) # File Size

# Adjust the File Size to be in multiples of 0x200 bytes
addi r25,r6,511
rlwinm r25,r25,0,0,22

# Increase the fixed REL size to account for the BSS's alignment requirement
lwz r23,0x248(r24) # fixSize; 0x200 + 0x48
lwz r3,0x244(r24) # bssAlign; 0x200 + 0x44
divwu r0,r23,r3
mullw r0,r0,r3
sub. r0,r23,r0
beq+ fixedRelSizeAligned

# Align the fixed REL size
mr r4,r23
neg r5,r3
and r5,r23,r5
add r23,r5,r3 # fixSize

# Get the difference between the new size and the old size
sub r4,r23,r4

# Add the difference to the File Size to account for the increased size
add r6,r6,r4

fixedRelSizeAligned:
# Add the BSS Area size to the File Size
lwz r22,0x220(r24) # BSS Area size; 0x200 + 0x20
add r21,r6,r22

# If the File Size + the BSS Area Size is less than the adjusted File Size, 
# then use the adjusted File Size as the size for the allocated memory
cmplw r21,r25
bge+ fileSizeIsValid
mr r21,r25

fileSizeIsValid:
# Free the 0x400 bytes from earlier
mr r4,r24
bl freeMemory

# Allocate memory for the File and BSS
mr r4,r21 # File Size + BSS Area Size
bl allocateMemory

# Backup the returned address to be used for later
mr r24,r3

# Read the REL Area of the file
ori r3,r28,CARDReadAsync@l
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
mr r4,r24 # Pointer to the File Buffer
mr r5,r25 # Adjusted File Size
li r6,0x2200 # Offset in the file to start reading from
li r7,0 # Read Callback Function (Want to avoid using, so NULL)
blrl
bl finishAsyncMemoryCardFunc
cmpwi r3,0 # Check if something went wrong
bne- freeCurrentMemoryArea

# Get the address of the BSS Area
add r25,r24,r23

# Link the functions in the REL
ori r3,r29,Link@l
mtlr r3
mr r3,r24 # Pointer to the Module
mr r4,r25 # Pointer to the BSS Area
li r5,1 # True
blrl
cmpwi r3,1 # Check if something went wrong
bne- unlinkRel

# Resize the allocated memory to remove the space used by the unnecessary relocation data
# Get the size of the REL + the BSS Area Size
add r3,r23,r22

# Adjust the size to be in multiples of 0x20 bytes
addi r3,r3,31
rlwinm r3,r3,0,0,26

# Make sure the current chunk of memory can be split into two parts
lwz r4,-0x18(r24) # Current chunk size
subi r4,r4,32 # Current chunk size - HEAP_ALIGNMENT
addi r5,r3,64 # size + MIN_CHUNK_SIZE
cmpw r5,r4
bgt- doneResizingChunk

# Set the new size of the current chunk of memory
addi r5,r3,32 # Size + HEAP_ALIGNMENT
stw r5,-0x18(r24)

# Set up the new chunk of memory
sub r6,r4,r3 # (Current chunk size - HEAP_ALIGNMENT) - size
add r4,r24,r3
stw r6,0x8(r4) # New chunk size

# Insert the new chunk into the free space of the heap
ori r3,r29,DLInsert@l
mtlr r3
lis r23,HeapArray@ha
lwz r23,HeapArray@l(r23)
lwz r3,0x4(r23) # firstFree
# r4 already contains the pointer to the new chunk of memory
blrl
stw r3,0x4(r23) # firstFree

doneResizingChunk:
# Store the BSS Area and the Module
stw r25,0x414C(r31) # Pointer to the BSS Area
stw r24,0x4150(r31) # Pointer to the Module

# Get the REL Prolog Pointer
lwz r27,0x34(r24)

# Done, so close and unmount the card
b closeCard

# Function definitions, error handling, etc.
freeMemory:
ori r3,r30,__memFree@l
mtctr r3
li r3,0 # Heap to use
bctr

allocateMemory:
ori r3,r30,__memAlloc@l
mtctr r3
li r3,0 # Heap to use
bctr

finishAsyncMemoryCardFunc:
cmpwi r3,0 # Check if something went wrong
bnelr-
mflr r14
ori r15,r28,CARDGetResultCode@l

finishAsyncFunctionLoop:
mtlr r15 # CARDGetResultCode
li r3,0 # Memory Card Slot A
blrl
cmpwi r3,-1 # CARD_RESULT_BUSY
beq+ finishAsyncFunctionLoop
mtlr r14
blr

unlinkRel:
ori r3,r29,OSUnlink@l
mtlr r3
mr r3,r24 # Pointer to the Module
blrl

freeCurrentMemoryArea:
mr r4,r24 # Pointer to the File Buffer or the 0x400 Bytes Buffer
bl freeMemory

closeCard:
ori r3,r28,CARDClose@l
mtlr r3
mr r3,r26 # Pointer to CardFileInfo
blrl

freeCardFileInfo:
mr r4,r26
bl freeMemory

# Unmount the Memory Card
ori r3,r28,CARDUnmount@l
mtlr r3
li r3,0 # Memory Card Slot A
blrl

# Run the REL Prolog if the load was successful
cmpwi r27,0
beq- exit
mtlr r27
blrl

exit:
# Add back in the overwritten instruction
li r3,0
